name: build

on:
  pull_request:
  push:
    branches:
      - master

env:
  RUSTFLAGS: -Dwarnings
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  draft-release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release_drafter.outputs.tag_name }}
    steps:
      - uses: release-drafter/release-drafter@v5
        id: release_drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  static-analysis:
    needs: draft-release
    name: Static analysis
    strategy:
      matrix:
        rust: [stable, nightly]
        runs-on:
          - ubuntu-20.04
          - ubuntu-22.04
          - macos-11
          - macos-12
          - windows-2019
          - windows-2022
        # FIXME: There's this weird cargo thing where it stops finding the webrtc's related crates
        # probably has to do with the cache + some cargo bug. 
        exclude:
          - rust: nightly
            runs-on: ubuntu-20.04
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update toolchain
        run: rustup update --no-self-update ${{ matrix.rust }} && rustup default ${{ matrix.rust }} && rustup component add clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run cargo static analysis checks
        run: |
          cargo check
          cargo clippy -- -D clippy::all
          cargo test

  build-android:
    needs:
      - static-analysis
      - draft-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        rust: [stable]
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Setup toolchain
        run: |
          rustup update --no-self-update ${{ matrix.rust }} \
          && rustup default ${{ matrix.rust }} \
          && rustup component add clippy \
          && rustup target add x86_64-linux-android arm-linux-androideabi aarch64-linux-android armv7-linux-androideabi i686-linux-android

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Assemble Release
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build assembleRelease
          build-root-directory: android
      - name: Move artifact
        run: |
          mv ./android/lib/build/outputs/aar/lib-release.aar ./connlib-${{ needs.draft-release.outputs.tag_name }}.aar
      - uses: actions/upload-artifact@v3
        with:
          name: connlib-android
          path: |
            ./connlib-${{ needs.draft-release.outputs.tag_name }}.aar

  build-apple:
    needs:
      - static-analysis
      - draft-release
    runs-on: macos-latest
    permissions:
      contents: read
    strategy:
      matrix:
        rust: [stable]
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Setup toolchain
        run: |
          rustup update --no-self-update ${{ matrix.rust }} \
          && rustup default ${{ matrix.rust }} \
          && rustup component add clippy \
          && rustup target add aarch64-apple-ios-sim aarch64-apple-ios aarch64-apple-darwin x86_64-apple-ios x86_64-apple-darwin \
          && cargo install cargo-lipo

      - uses: actions/cache@v3
        with:
          path: apple/.build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build Connlib.xcframework.zip
        env:
          CONFIGURATION: Release
          PROJECT_DIR: .
        run: |
          cd apple
          # build-xcframework.sh calls build-rust.sh indirectly via `xcodebuild`, but it pollutes the environment
          # to the point that it causes the `ring` build to fail for the aarch64-apple-darwin target. So, explicitly
          # build first. See https://github.com/briansmith/ring/issues/1332
          ./build-rust.sh
          ./build-xcframework.sh
          mv Connlib.xcframework.zip ../Connlib-${{ needs.draft-release.outputs.tag_name }}.xcframework.zip
          mv Connlib.xcframework.zip.checksum.txt ../Connlib-${{ needs.draft-release.outputs.tag_name }}.xcframework.zip.checksum.txt
      - uses: actions/upload-artifact@v3
        with:
          name: connlib-apple
          path: |
            ./Connlib-${{ needs.draft-release.outputs.tag_name }}.xcframework.zip
            ./Connlib-${{ needs.draft-release.outputs.tag_name }}.xcframework.zip.checksum.txt

  # Publish packages to the drafted release on merges to master so we can
  # manually test them if needed. Then we can just publish the drafted release
  # and we're good to go.
  publish-draft:
    if: startsWith(github.ref, 'refs/heads/master')
    runs-on: ubuntu-latest
    needs:
      - build-android
      - build-apple
      - draft-release
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: ./
      - run: ls -alR
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.draft-release.outputs.tag_name }}
          draft: true
          files: |
            ./connlib-android/connlib-${{ needs.draft-release.outputs.tag_name }}.aar
            ./connlib-apple/Connlib-${{ needs.draft-release.outputs.tag_name }}.xcframework.zip
            ./connlib-apple/Connlib-${{ needs.draft-release.outputs.tag_name }}.xcframework.zip.checksum.txt
